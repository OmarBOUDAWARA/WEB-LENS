import * as raw from '@lens-protocol/metadata';

import * as gql from '../graphql';
import { resolvePathsToDecrypt, resolvePathsToEncrypt } from '../paths';

describe(`Given the paths helpers`, () => {
  describe(`when calling the "${resolvePathsToEncrypt.name}" function`, () => {
    describe.each([
      {
        schema: raw.PublicationSchemaId.ARTICLE_LATEST,
        expected: [
          'lens.content',
          // 'lens.title' // omitted on purpose to allow to tease potential audience
          'lens.attachments[n].item',
          'lens.attachments[n].altTag',
          'lens.attachments[n].cover',
          'lens.attachments[n].credits',
          'lens.attachments[n].artist',
          'lens.attachments[n].genre',
          'lens.attachments[n].recordLabel',
          'lens.attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.AUDIO_LATEST,
        expected: [
          'lens.content',
          // 'lens.title' // omitted on purpose to allow to tease potential audience
          'lens.audio.item',
          'lens.audio.cover',
          'lens.audio.credits',
          'lens.audio.artist',
          'lens.audio.genre',
          'lens.audio.recordLabel',
          'lens.audio.lyrics',
          'lens.attachments[n].item',
          'lens.attachments[n].altTag',
          'lens.attachments[n].cover',
          'lens.attachments[n].credits',
          'lens.attachments[n].artist',
          'lens.attachments[n].genre',
          'lens.attachments[n].recordLabel',
          'lens.attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.CHECKING_IN_LATEST,
        expected: [
          'lens.content',
          'lens.location',
          'lens.address.country',
          'lens.address.formatted',
          'lens.address.locality',
          'lens.address.postalCode',
          'lens.address.region',
          'lens.address.streetAddress',
          'lens.position',
          'lens.attachments[n].item',
          'lens.attachments[n].altTag',
          'lens.attachments[n].cover',
          'lens.attachments[n].credits',
          'lens.attachments[n].artist',
          'lens.attachments[n].genre',
          'lens.attachments[n].recordLabel',
          'lens.attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.EMBED_LATEST,
        expected: [
          'lens.content',
          'lens.embed',
          'lens.attachments[n].item',
          'lens.attachments[n].altTag',
          'lens.attachments[n].cover',
          'lens.attachments[n].credits',
          'lens.attachments[n].artist',
          'lens.attachments[n].genre',
          'lens.attachments[n].recordLabel',
          'lens.attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.EVENT_LATEST,
        expected: [
          'lens.content',
          'lens.location',
          'lens.address.country',
          'lens.address.formatted',
          'lens.address.locality',
          'lens.address.postalCode',
          'lens.address.region',
          'lens.address.streetAddress',
          'lens.position',
          'lens.startsAt',
          'lens.endsAt',
          'lens.links[n]',
          'lens.attachments[n].item',
          'lens.attachments[n].altTag',
          'lens.attachments[n].cover',
          'lens.attachments[n].credits',
          'lens.attachments[n].artist',
          'lens.attachments[n].genre',
          'lens.attachments[n].recordLabel',
          'lens.attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.IMAGE_LATEST,
        expected: [
          'lens.content',
          // 'lens.title' // omitted on purpose to allow to tease potential audience
          'lens.image.item',
          'lens.image.altTag',
          'lens.attachments[n].item',
          'lens.attachments[n].altTag',
          'lens.attachments[n].cover',
          'lens.attachments[n].credits',
          'lens.attachments[n].artist',
          'lens.attachments[n].genre',
          'lens.attachments[n].recordLabel',
          'lens.attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.LINK_LATEST,
        expected: [
          'lens.content',
          'lens.sharingLink',
          'lens.attachments[n].item',
          'lens.attachments[n].altTag',
          'lens.attachments[n].cover',
          'lens.attachments[n].credits',
          'lens.attachments[n].artist',
          'lens.attachments[n].genre',
          'lens.attachments[n].recordLabel',
          'lens.attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.LIVESTREAM_LATEST,
        expected: [
          'lens.content',
          // 'lens.title', // omitted on purpose to allow to tease potential audience
          'lens.startsAt',
          'lens.endsAt',
          'lens.playbackUrl',
          'lens.liveUrl',
          'lens.checkLiveAPI',
          'lens.attachments[n].item',
          'lens.attachments[n].altTag',
          'lens.attachments[n].cover',
          'lens.attachments[n].credits',
          'lens.attachments[n].artist',
          'lens.attachments[n].genre',
          'lens.attachments[n].recordLabel',
          'lens.attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.MINT_LATEST,
        expected: [
          'lens.content',
          'lens.mintLink',
          'lens.attachments[n].item',
          'lens.attachments[n].altTag',
          'lens.attachments[n].cover',
          'lens.attachments[n].credits',
          'lens.attachments[n].artist',
          'lens.attachments[n].genre',
          'lens.attachments[n].recordLabel',
          'lens.attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.SPACE_LATEST,
        expected: [
          'lens.content',
          // 'lens.title', // omitted on purpose to allow to tease potential audience
          'lens.link',
          'lens.startsAt',
          'lens.attachments[n].item',
          'lens.attachments[n].altTag',
          'lens.attachments[n].cover',
          'lens.attachments[n].credits',
          'lens.attachments[n].artist',
          'lens.attachments[n].genre',
          'lens.attachments[n].recordLabel',
          'lens.attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.STORY_LATEST,
        expected: [
          'lens.content',
          // 'lens.title', // omitted on purpose to allow to tease potential audience
          'lens.asset.item',
          'lens.asset.altTag',
          'lens.asset.cover',
          'lens.asset.credits',
          'lens.asset.artist',
          'lens.asset.genre',
          'lens.asset.recordLabel',
          'lens.asset.lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.TEXT_ONLY_LATEST,
        expected: ['lens.content'],
      },
      {
        schema: raw.PublicationSchemaId.THREE_D_LATEST,
        expected: [
          'lens.content',
          'lens.assets[n].uri',
          'lens.assets[n].playerUrl',
          'lens.attachments[n].item',
          'lens.attachments[n].altTag',
          'lens.attachments[n].cover',
          'lens.attachments[n].credits',
          'lens.attachments[n].artist',
          'lens.attachments[n].genre',
          'lens.attachments[n].recordLabel',
          'lens.attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.TRANSACTION_LATEST,
        expected: [
          'lens.content',
          'lens.txHash',
          'lens.attachments[n].item',
          'lens.attachments[n].altTag',
          'lens.attachments[n].cover',
          'lens.attachments[n].credits',
          'lens.attachments[n].artist',
          'lens.attachments[n].genre',
          'lens.attachments[n].recordLabel',
          'lens.attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.VIDEO_LATEST,
        expected: [
          'lens.content',
          // 'lens.title' // omitted on purpose to allow to tease potential audience
          'lens.video.item',
          'lens.video.altTag',
          'lens.video.cover',
          'lens.attachments[n].item',
          'lens.attachments[n].altTag',
          'lens.attachments[n].cover',
          'lens.attachments[n].credits',
          'lens.attachments[n].artist',
          'lens.attachments[n].genre',
          'lens.attachments[n].recordLabel',
          'lens.attachments[n].lyrics',
        ],
      },
    ])(`with metadata conforming to $schema schema`, ({ schema, expected }) => {
      it(`should return the expected list of paths to encrypt`, () => {
        const result = resolvePathsToEncrypt({
          $schema: schema,
        } as raw.PublicationMetadata);

        expect(result).toEqual(expected);
      });
    });
  });

  describe(`when calling the "${resolvePathsToDecrypt.name}" function`, () => {
    describe.each([
      {
        schema: raw.PublicationSchemaId.ARTICLE_LATEST,
        typename: 'ArticleMetadataV3',
        expected: [
          'content',
          'attachments[n].altTag',
          'attachments[n].audio.raw.uri',
          'attachments[n].image.raw.uri',
          'attachments[n].video.raw.uri',
          'attachments[n].cover.raw.uri',
          'attachments[n].credits',
          'attachments[n].artist',
          'attachments[n].genre',
          'attachments[n].recordLabel',
          'attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.AUDIO_LATEST,
        typename: 'AudioMetadataV3',
        expected: [
          'content',
          'asset.audio.raw.uri',
          'asset.cover.raw.uri',
          'asset.credits',
          'asset.artist',
          'asset.genre',
          'asset.recordLabel',
          'asset.lyrics',
          'attachments[n].altTag',
          'attachments[n].audio.raw.uri',
          'attachments[n].image.raw.uri',
          'attachments[n].video.raw.uri',
          'attachments[n].cover.raw.uri',
          'attachments[n].credits',
          'attachments[n].artist',
          'attachments[n].genre',
          'attachments[n].recordLabel',
          'attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.CHECKING_IN_LATEST,
        typename: 'CheckingInMetadataV3',
        expected: [
          'content',
          'location',
          'address.country',
          'address.formatted',
          'address.locality',
          'address.postalCode',
          'address.region',
          'address.streetAddress',
          'geographic.rawURI',
          'attachments[n].altTag',
          'attachments[n].audio.raw.uri',
          'attachments[n].image.raw.uri',
          'attachments[n].video.raw.uri',
          'attachments[n].cover.raw.uri',
          'attachments[n].credits',
          'attachments[n].artist',
          'attachments[n].genre',
          'attachments[n].recordLabel',
          'attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.EMBED_LATEST,
        typename: 'EmbedMetadataV3',
        expected: [
          'content',
          'embed',
          'attachments[n].altTag',
          'attachments[n].audio.raw.uri',
          'attachments[n].image.raw.uri',
          'attachments[n].video.raw.uri',
          'attachments[n].cover.raw.uri',
          'attachments[n].credits',
          'attachments[n].artist',
          'attachments[n].genre',
          'attachments[n].recordLabel',
          'attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.EVENT_LATEST,
        typename: 'EventMetadataV3',
        expected: [
          'address.country',
          'address.formatted',
          'address.locality',
          'address.postalCode',
          'address.region',
          'address.streetAddress',
          'content',
          'location',
          'geographic.rawURI',
          'startsAt',
          'endsAt',
          'links[n]',
          'attachments[n].altTag',
          'attachments[n].audio.raw.uri',
          'attachments[n].image.raw.uri',
          'attachments[n].video.raw.uri',
          'attachments[n].cover.raw.uri',
          'attachments[n].credits',
          'attachments[n].artist',
          'attachments[n].genre',
          'attachments[n].recordLabel',
          'attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.IMAGE_LATEST,
        typename: 'ImageMetadataV3',
        expected: [
          'content',
          'asset.altTag',
          'asset.image.raw.uri',
          'attachments[n].altTag',
          'attachments[n].audio.raw.uri',
          'attachments[n].image.raw.uri',
          'attachments[n].video.raw.uri',
          'attachments[n].cover.raw.uri',
          'attachments[n].credits',
          'attachments[n].artist',
          'attachments[n].genre',
          'attachments[n].recordLabel',
          'attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.LINK_LATEST,
        typename: 'LinkMetadataV3',
        expected: [
          'content',
          'sharingLink',
          'attachments[n].altTag',
          'attachments[n].audio.raw.uri',
          'attachments[n].image.raw.uri',
          'attachments[n].video.raw.uri',
          'attachments[n].cover.raw.uri',
          'attachments[n].credits',
          'attachments[n].artist',
          'attachments[n].genre',
          'attachments[n].recordLabel',
          'attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.LIVESTREAM_LATEST,
        typename: 'LiveStreamMetadataV3',
        expected: [
          'content',
          'startsAt',
          'endsAt',
          'playbackURL',
          'liveURL',
          'checkLiveAPI',
          'attachments[n].altTag',
          'attachments[n].audio.raw.uri',
          'attachments[n].image.raw.uri',
          'attachments[n].video.raw.uri',
          'attachments[n].cover.raw.uri',
          'attachments[n].credits',
          'attachments[n].artist',
          'attachments[n].genre',
          'attachments[n].recordLabel',
          'attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.MINT_LATEST,
        typename: 'MintMetadataV3',
        expected: [
          'content',
          'mintLink',
          'attachments[n].altTag',
          'attachments[n].audio.raw.uri',
          'attachments[n].image.raw.uri',
          'attachments[n].video.raw.uri',
          'attachments[n].cover.raw.uri',
          'attachments[n].credits',
          'attachments[n].artist',
          'attachments[n].genre',
          'attachments[n].recordLabel',
          'attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.SPACE_LATEST,
        typename: 'SpaceMetadataV3',
        expected: [
          'content',
          'link',
          'startsAt',
          'attachments[n].altTag',
          'attachments[n].audio.raw.uri',
          'attachments[n].image.raw.uri',
          'attachments[n].video.raw.uri',
          'attachments[n].cover.raw.uri',
          'attachments[n].credits',
          'attachments[n].artist',
          'attachments[n].genre',
          'attachments[n].recordLabel',
          'attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.STORY_LATEST,
        typename: 'StoryMetadataV3',
        expected: [
          'content',
          'asset.altTag',
          'asset.audio.raw.uri',
          'asset.image.raw.uri',
          'asset.video.raw.uri',
          'asset.cover.raw.uri',
          'asset.credits',
          'asset.artist',
          'asset.genre',
          'asset.recordLabel',
          'asset.lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.TEXT_ONLY_LATEST,
        typename: 'TextOnlyMetadataV3',
        expected: ['content'],
      },
      {
        schema: raw.PublicationSchemaId.THREE_D_LATEST,
        typename: 'ThreeDMetadataV3',
        expected: [
          'content',
          'assets[n].uri',
          'assets[n].playerURL',
          'attachments[n].altTag',
          'attachments[n].audio.raw.uri',
          'attachments[n].image.raw.uri',
          'attachments[n].video.raw.uri',
          'attachments[n].cover.raw.uri',
          'attachments[n].credits',
          'attachments[n].artist',
          'attachments[n].genre',
          'attachments[n].recordLabel',
          'attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.TRANSACTION_LATEST,
        typename: 'TransactionMetadataV3',
        expected: [
          'content',
          'txHash',
          'attachments[n].altTag',
          'attachments[n].audio.raw.uri',
          'attachments[n].image.raw.uri',
          'attachments[n].video.raw.uri',
          'attachments[n].cover.raw.uri',
          'attachments[n].credits',
          'attachments[n].artist',
          'attachments[n].genre',
          'attachments[n].recordLabel',
          'attachments[n].lyrics',
        ],
      },
      {
        schema: raw.PublicationSchemaId.VIDEO_LATEST,
        typename: 'VideoMetadataV3',
        expected: [
          'content',
          'asset.altTag',
          'asset.video.raw.uri',
          'asset.cover.raw.uri',
          'attachments[n].altTag',
          'attachments[n].audio.raw.uri',
          'attachments[n].image.raw.uri',
          'attachments[n].video.raw.uri',
          'attachments[n].cover.raw.uri',
          'attachments[n].credits',
          'attachments[n].artist',
          'attachments[n].genre',
          'attachments[n].recordLabel',
          'attachments[n].lyrics',
        ],
      },
    ])(`with a GQL $typename fragment`, ({ schema, expected }) => {
      it(`should return the expected list of paths to decrypt`, () => {
        const encryptedPaths = resolvePathsToEncrypt({
          $schema: schema,
        } as raw.PublicationMetadata);

        const result = resolvePathsToDecrypt({
          encryptedWith: {
            encryptedPaths,
          } as unknown, // TODO remove "as unknown" when the type is fixed
        } as gql.EncryptedFragmentOfAnyPublicationMetadata);

        expect(result).toEqual(expect.arrayContaining(expected));
      });
    });
  });
});
